const path = require("path");
const dotenv = require("dotenv");

// Charge .env puis .env.local
dotenv.config({ path: path.resolve(process.cwd(), ".env") });
dotenv.config({ path: path.resolve(process.cwd(), ".env.local"), override: true });

const app = require("../app");
const debug = require("debug")("to-do-list:server");
const http = require("http");

const { sequelize, Label } = require("../models"); 

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);

(async () => {
  try {
    console.log("Connexion DBâ€¦");
    await sequelize.authenticate();
    console.log("DB connectÃ©e");

    console.log("Sync modÃ¨lesâ€¦");
    await sequelize.sync({ alter: true }); // en prod: prÃ©fÃ©rer les migrations
    console.log("Sync OK");

    // Seed Labels si vide
    if ((await Label.count()) === 0) {
      await Label.bulkCreate([
        { name: "Perso",   color: "#4CAF50" },
        { name: "Travail", color: "#2196F3" },
        { name: "Urgent",  color: "#F44336" },
      ]);
      console.log("Seed labels OK");
    }

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  } catch (err) {
    console.error("Ã‰chec init serveur:", err);
    process.exit(1);
  }
})();

function normalizePort(val) {
  const n = parseInt(val, 10);
  if (Number.isNaN(n)) return val; // named pipe
  if (n >= 0) return n;
  return false;
}

function onError(error) {
  if (error.syscall !== "listen") throw error;
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":    console.error(bind + " requires elevated privileges"); process.exit(1); break;
    case "EADDRINUSE":console.error(bind + " is already in use");            process.exit(1); break;
    default: throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`ðŸš€ http://127.0.0.1:${bind.replace("port ", "")}`);
}

process.on("SIGINT", shutdown);
process.on("SIGTERM", shutdown);
async function shutdown() {
  console.log("\nArrÃªtâ€¦");
  try { await sequelize.close(); console.log("DB fermÃ©e"); } catch (e) { console.error("Erreur fermeture DB:", e); }
  server.close(() => process.exit(0));
}
